// Created by convert.py from ./src/chord/analyses/deadlock/nonreent_exclude.dlog on 2015-04-20 13:08:42.241027
// # Copyright (c) 2008-2010, Intel Corporation.
// # Copyright (c) 2006-2007, The Trustees of Stanford University.
// # All rights reserved.
// # Licensed under the terms of the New BSD License.

// # Author: Mayur Naik (mhn@cs.stanford.edu)
// :name: deadlock-nonreent-exclude-dlog

// :domains: M
// :domains: V
// :domains: A
// :domains: L
// :domains: I


// ###
// # Relations
// ###

// :inputs: ML(M,L)
// :inputs: MI(M,I)
// :inputs: threadStartI(I)
// :inputs: threadAM(A,M)
// :inputs: IM(I,M)
// :inputs: transLI(L,I)
// :inputs: transLL(L,L)

// convert.py: following intermediate relation converted to output relation
// :outputs: syncMN(M,L)
syncMN(m,n) -> M(m), L(n).
// convert.py: following intermediate relation converted to output relation
// :outputs: syncIN(I,L)
syncIN(i,n) -> I(i), L(n).

// convert.py: following intermediate relation converted to output relation
// :outputs: syncMLL(M,L,L)
syncMLL(m,l1,l2) -> M(m), L(l1), L(l2).
// convert.py: following intermediate relation converted to output relation
// :outputs: syncILL(I,L,L)
syncILL(i,l1,l2) -> I(i), L(l1), L(l2).
// :outputs: syncTLL(A,L,L)
syncTLL(t,l1,l2) -> A(t), L(l1), L(l2).

// ###
// # Constraints
// ###

syncML(m,l) <- ML(m,l).
syncIL(i,l) <- IM(i,m), syncML(m,l), !threadStartI(i).
syncML(m,l) <- MI(m,i), syncIL(i,l).

syncMLL(m,l1,l2) <- transLL(l1,l2), ML(m,l1), ML(m,l2).
syncMLL(m,l1,l2) <- transLI(l1,i), MI(m,i), syncIL(i,l2).
syncMLL(m,l1,l2) <- MI(m,i), syncILL(i,l1,l2).

syncILL(i,l1,l2) <- IM(i,m), syncMLL(m,l1,l2), !threadStartI(i).

syncTLL(t,l1,l2) <- threadAM(t,m), syncMLL(m,l1,l2).

