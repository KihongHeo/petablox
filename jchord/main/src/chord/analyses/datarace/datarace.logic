// Created by convert.py from ./src/chord/analyses/datarace/datarace.dlog on 2015-04-20 13:08:42.231754
// # Copyright (c) 2008-2010, Intel Corporation.
// # Copyright (c) 2006-2007, The Trustees of Stanford University.
// # All rights reserved.
// # Licensed under the terms of the New BSD License.

// # Author: Mayur Naik (mhn@cs.stanford.edu)
// :name: datarace-dlog

// :domains: A
// :domains: F
// :domains: E
// :domains: H
// :domains: M
// :domains: L
// :domains: K


// ###
// # Relations
// ###

// :inputs: writeE(E)
// :inputs: ME(M,E)
// :inputs: EF(E,F)
// :inputs: statF(F)
// :inputs: reachableAM(A,M)
// :inputs: checkExcludedM(M)
// :inputs: excludeInitMethods(K)
// :inputs: initM(M)

// convert.py: following intermediate relation converted to output relation
// :outputs: statE(E)
statE(e) -> E(e).
// convert.py: following intermediate relation converted to output relation
// :outputs: rdOrWrAEF(A,E,F)
rdOrWrAEF(a,e,f) -> A(a), E(e), F(f).
// convert.py: following intermediate relation converted to output relation
// :outputs: onlyWrAEF(A,E,F)
onlyWrAEF(a,e,f) -> A(a), E(e), F(f).
// convert.py: following intermediate relation converted to output relation
// :outputs: relevantAM(A,M)
relevantAM(a,m) -> A(a), M(m).
// convert.py: following intermediate relation converted to output relation
// :outputs: relevantAE(A,E)
relevantAE(a,e) -> A(a), E(e).
// convert.py: following intermediate relation converted to output relation
// :outputs: excludeInitM(M)
excludeInitM(m) -> M(m).

// ###

// convert.py: following intermediate relation converted to output relation
// :outputs: startingRace(A,E,A,E)
startingRace(a1,e1,a2,e2) -> A(a1), E(e1), A(a2), E(e2).

// ###

// :inputs: EH(E,H)
// :outputs: escapingRace(A,E,A,E)
escapingRace(a1,e1,a2,e2) -> A(a1), E(e1), A(a2), E(e2).

// ###

// :inputs: mhe(E,A,A)
// :outputs: parallelRace(A,E,A,E)
parallelRace(a1,e1,a2,e2) -> A(a1), E(e1), A(a2), E(e2).

// ###

// :inputs: syncLH(L,H)
// :inputs: unlockedE(A,E,H)
// :inputs: excludeSameThread(K)
// convert.py: following intermediate relation converted to output relation
// :outputs: guardedE(A,E,H)
guardedE(t,e,o) -> A(t), E(e), H(o).
// :outputs: unlikelyRace(A,E,A,E)
unlikelyRace(a1,e1,a2,e2) -> A(a1), E(e1), A(a2), E(e2).

// :outputs: ultimateRace(A,E,A,E)
ultimateRace(a1,e1,a2,e2) -> A(a1), E(e1), A(a2), E(e2).
// :outputs: raceEEH(E,E,H)
raceEEH(e1,e2,h) -> E(e1), E(e2), H(h).
// :outputs: racePairs(E,E)
racePairs(e1,e2) -> E(e1), E(e2).

// ###
// # Constraints
// ###

excludeInitM(m) <- excludeInitMethods(1), initM(m).

relevantAM(a,m) <- reachableAM(a,m), !checkExcludedM(m), !excludeInitM(m).

relevantAE(a,e) <- relevantAM(a,m), ME(m,e).

rdOrWrAEF(a,e,f) <- relevantAE(a,e), EF(e,f).
onlyWrAEF(a,e,f) <- relevantAE(a,e), EF(e,f), writeE(e).

startingRace(a1,e1,a2,e2) <- onlyWrAEF(a1,e1,f), rdOrWrAEF(a2,e2,f), e1 < e2.
startingRace(a1,e1,a2,e2) <- rdOrWrAEF(a1,e1,f), onlyWrAEF(a2,e2,f), e1 < e2.
startingRace(a1,e1,a2,e2) <- onlyWrAEF(a1,e1,f), onlyWrAEF(a2,e2,f), e1 = e2, a1 <= a2.

// ###

statE(e) <- EF(e,f), statF(f).

escapingRace(a1,e1,a2,e2) <- startingRace(a1,e1,a2,e2), EH(e1,h), EH(e2,h).
escapingRace(a1,e1,a2,e2) <- startingRace(a1,e1,a2,e2), statE(e1), statE(e2).

// ###

parallelRace(a1,e1,a2,e2) <- escapingRace(a1,e1,a2,e2), mhe(e1,a1,a2), mhe(e2,a2,a1).

// ###

syncH(h) <- syncLH(_,h).
guardedE(t,e,h) <- relevantAE(t,e), syncH(h), !unlockedE(t,e,h).

unlikelyRace(a1,e1,a2,e2) <- parallelRace(a1,e1,a2,e2), guardedE(a1,e1,h), guardedE(a2,e2,h).
unlikelyRace(a1,e1,a2,e2) <- parallelRace(a1,e1,a2,e2), excludeSameThread(1), a1=a2.

ultimateRace(a1,e1,a2,e2) <- parallelRace(a1,e1,a2,e2), !unlikelyRace(a1,e1,a2,e2).

raceEEH(e1,e2,h) <- ultimateRace(_,e1,_,e2), EH(e1,h), EH(e2,h).
racePairs(e1,e2) <- ultimateRace(_,e1,_,e2).

