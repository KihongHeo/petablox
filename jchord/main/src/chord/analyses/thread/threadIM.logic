// Created by convert.py from ./src/chord/analyses/thread/threadIM.dlog on 2015-04-20 13:08:42.318107
// # Copyright (c) 2008-2010, Intel Corporation.
// # Copyright (c) 2006-2007, The Trustees of Stanford University.
// # All rights reserved.
// # Licensed under the terms of the New BSD License.

// # Author: Mayur Naik (mhn@cs.stanford.edu)
// :name: threadIM-dlog

// :domains: M
// :domains: V
// :domains: H
// :domains: Z
// :domains: I
// :domains: T


// ###
// # Relations
// ###

// :inputs: IinvkArg(I0,Z0,V1)
// :inputs: cha(M1,T1,M0)
// :inputs: VH(V,H)
// :inputs: HT(H0,T1)
// :inputs: threadAllocI(I)
// :inputs: threadStartI(I)
// :inputs: excludeThreadStartI(I)

// convert.py: following intermediate relation converted to output relation
// :outputs: runCHA(H,M)
runCHA(h,m) -> H(h), M(m).
// convert.py: following intermediate relation converted to output relation
// :outputs: threadRunM(M)
threadRunM(m) -> M(m).
// convert.py: following intermediate relation converted to output relation
// :outputs: threadAllocIH0(I,H)
threadAllocIH0(i,h) -> I(i), H(h).
// convert.py: following intermediate relation converted to output relation
// :outputs: threadAllocIH1(I,H)
threadAllocIH1(i,h) -> I(i), H(h).
// convert.py: following intermediate relation converted to output relation
// :outputs: threadStartIH0(I,H)
threadStartIH0(i,h) -> I(i), H(h).

// :outputs: threadIM(I,M)
threadIM(i,m) -> I(i), M(m).
// :outputs: nonMainThreadM(M)
nonMainThreadM(m) -> M(m).

// ###
// # Constraints
// ###

runCHA(h,n) <- cha("run:()V@java.lang.Runnable",t,n), HT(h,t).

threadRunM("run:()V@java.lang.Thread").

threadAllocIH0(i,h) <- threadAllocI(i), IinvkArg(i,0,v), VH(v,h).
threadAllocIH1(i,h) <- threadAllocI(i), IinvkArg(i,1,v), VH(v,h).
threadAllocIH1(i,h) <- threadAllocI(i), IinvkArg(i,2,v), VH(v,h).
threadStartIH0(i,h) <- threadStartI(i), IinvkArg(i,0,v), VH(v,h), !excludeThreadStartI(i).

threadIM(i,m) <- threadStartIH0(i,h), runCHA(h,m), !threadRunM(m).
threadIM(i,n) <- threadStartIH0(i,h), runCHA(h,m), threadRunM(m), threadAllocIH0(i2,h), threadAllocIH1(i2,h2), runCHA(h2,n).
nonMainThreadM(m) <- threadIM(_,m).
