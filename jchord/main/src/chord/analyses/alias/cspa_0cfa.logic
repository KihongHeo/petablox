// Created by convert.py from ./src/chord/analyses/alias/cspa_0cfa.dlog on 2015-04-20 13:08:42.212581
// # Copyright (c) 2008-2010, Intel Corporation.
// # Copyright (c) 2006-2007, The Trustees of Stanford University.
// # All rights reserved.
// # Licensed under the terms of the New BSD License.

// # Adaptor of context-insensitive may-alias/call-graph analysis
// # to a trivial context-sensitive one.

// # Author: Mayur Naik (mhn@cs.stanford.edu)
// :name: cspa-0cfa-dlog

// :domains: F
// :domains: H
// :domains: I
// :domains: M
// :domains: V
// :domains: C


// ###
// # Relations
// ###

// :inputs: CH(C,H)
// :inputs: VH(V,H)
// :inputs: FH(F,H)
// :inputs: HFH(H,F,H)
// :inputs: rootM(M)
// :inputs: reachableI(I)
// :inputs: reachableM(M)
// :inputs: IM(I,M)
// :inputs: MM(M,M)

// :outputs: CVC(C,V,C)
CVC(c1,v,c2) -> C(c1), V(v), C(c2).
// :outputs: FC(F,C)
FC(f,c) -> F(f), C(c).
// :outputs: CFC(C,F,C)
CFC(c1,f,c2) -> C(c1), F(f), C(c2).
// :outputs: rootCM(C,M)
rootCM(c,m) -> C(c), M(m).
// :outputs: reachableCI(C,I)
reachableCI(c,i) -> C(c), I(i).
// :outputs: reachableCM(C,M)
reachableCM(c,m) -> C(c), M(m).
// :outputs: CICM(C,I,C,M)
CICM(c,i,d,m) -> C(c), I(i), C(d), M(m).
// :outputs: CMCM(C,M,C,M)
CMCM(c,m,d,n) -> C(c), M(m), C(d), M(n).

// ###
// # Constraints
// ###

reachableCI(0,i) <- reachableI(i).
reachableCM(0,m) <- reachableM(m).

CVC(0,v,o) <- VH(v,h), CH(o,h).
FC(f,o) <- FH(f,h), CH(o,h).
CFC(o1,f,o2) <- HFH(h1,f,h2), CH(o1,h1), CH(o2,h2).
rootCM(0,m) <- rootM(m).
CICM(0,i,0,m) <- IM(i,m).
CMCM(0,m,0,n) <- MM(m,n).

