// Created by convert.py from ./src/chord/analyses/provenance/kcfa/cspa_kcfa.dlog on 2015-04-20 13:08:42.260082
// # Copyright (c) 2008-2010, Intel Corporation.
// # Copyright (c) 2006-2007, The Trustees of Stanford University.
// # All rights reserved.
// # Licensed under the terms of the New BSD License.

// # k-CFA may-alias/call-graph analysis.

// # Author: Mayur Naik (mhn@cs.stanford.edu)
// :name: pro-cspa-kcfa-dlog

// :domains: F
// :domains: H
// :domains: I
// :domains: M
// :domains: T
// :domains: V
// :domains: Z
// :domains: C


// ###
// # Relations
// ###

// :inputs: HT(H0,T1)
// :inputs: cha(M1,T1,M0)
// :inputs: sub(T1,T0)
// :inputs: MI(M,I)
// :inputs: statIM(I,M)
// :inputs: specIM(I,M)
// :inputs: virtIM(I,M)

// :inputs: MobjValAsgnInst(M,V,H)
// :inputs: MobjVarAsgnInst(M,V,V)
// :inputs: MgetInstFldInst(M,V,V,F)
// :inputs: MputInstFldInst(M,V,F,V)
// :inputs: MgetStatFldInst(M,V,F)
// :inputs: MputStatFldInst(M,F,V)

// :inputs: clsForNameIT(I,T)
// :inputs: objNewInstIH(I,H)
// :inputs: objNewInstIM(I,M)
// :inputs: conNewInstIH(I,H)
// :inputs: conNewInstIM(I,M)
// :inputs: aryNewInstIH(I,H)

// :outputs: RobjValAsgnInst(C,V,H)
RobjValAsgnInst(c,l,h) -> C(c), V(l), H(h).
// :outputs: RobjVarAsgnInst(C,V,V)
RobjVarAsgnInst(c,l,r) -> C(c), V(l), V(r).
// :outputs: RgetInstFldInst(C,V,V,F)
RgetInstFldInst(c,l,b,f) -> C(c), V(l), V(b), F(f).
// :outputs: RputInstFldInst(C,V,F,V)
RputInstFldInst(c,b,f,r) -> C(c), V(b), F(f), V(r).
// :outputs: RgetStatFldInst(C,V,F)
RgetStatFldInst(c,l,f) -> C(c), V(l), F(f).
// :outputs: RputStatFldInst(C,F,V)
RputStatFldInst(c,f,r) -> C(c), F(f), V(r).

// :inputs: classT(T)
// :inputs: staticTM(T,M)
// :inputs: staticTF(T,F)
// :inputs: clinitTM(T,M)
// :inputs: MmethArg(M,Z,V)
// :inputs: IinvkArg(I0,Z0,V1)
// :inputs: IinvkArg0(I0,V1)
// :inputs: IinvkRet(I,Z,V)
// :inputs: argCopy(I,V,M,V)
// :inputs: retCopy(I,V,M,V)
// :inputs: VCfilter(V,C)

// #CC(c:C,d:C) input # d = [* c]
// :inputs: CH(C,H)
// #CI(c:C,i:I) input # c = [i ...]
// :inputs: epsilonM(M)
// :inputs: kcfaSenM(M)

// :outputs: IHM(I,H,M)
IHM(i,h,m) -> I(i), H(h), M(m).
// :outputs: reachableT(T)
reachableT(t) -> T(t).

// :outputs: kcfaDIC(C,I,C)
kcfaDIC(c,i,c1) -> C(c), I(i), C(c1).
// :outputs: DIC(C,I,C)
DIC(c,i,c1) -> C(c), I(i), C(c1).
// :outputs: DIH(C,I,H)
DIH(c,i,h) -> C(c), I(i), H(h).
// :outputs: DI(C,I)
DI(c,i) -> C(c), I(i).

// :outputs: DVDV(C,V,C,V)
DVDV(c,u,d,v) -> C(c), V(u), C(d), V(v).

// :outputs: ctxtInsIHM(I,H,M)
ctxtInsIHM(i,h,m) -> I(i), H(h), M(m).
// :outputs: kcfaSenIHM(I,H,M)
kcfaSenIHM(i,h,m) -> I(i), H(h), M(m).

// :outputs: ctxtInsSpecIM(I,M)
ctxtInsSpecIM(i,m) -> I(i), M(m).
// :outputs: kcfaSenSpecIM(I,M)
kcfaSenSpecIM(i,m) -> I(i), M(m).

// :outputs: ctxtInsStatIM(I,M)
ctxtInsStatIM(i,m) -> I(i), M(m).
// :outputs: kcfaSenStatIM(I,M)
kcfaSenStatIM(i,m) -> I(i), M(m).

// :outputs: reachableCI(C,I)
reachableCI(c,i) -> C(c), I(i).
// :outputs: reachableCM(C,M)
reachableCM(c,m) -> C(c), M(m).

// :outputs: rootCM(C,M)
rootCM(c,m) -> C(c), M(m).
// :outputs: CICM(C,I,C,M)
CICM(c,i,d,m) -> C(c), I(i), C(d), M(m).
// :outputs: CMCM(C,M,C,M)
CMCM(c,m,d,n) -> C(c), M(m), C(d), M(n).

// :outputs: CVC(C,V,C)
CVC(c1,v,c2) -> C(c1), V(v), C(c2).

// :outputs: FC(F,C)
FC(f,c) -> F(f), C(c).
// :outputs: CFC(C,F,C)
CFC(c1,f,c2) -> C(c1), F(f), C(c2).

// :inputs: CIC(C,I,C)
// :inputs: CHC(C,H,C)

// ###
// # Constraints
// ###

// #CIC(c,i,d) :- CC(c,d), CI(d,i).
// #CHC(c,h,d) :- CC(c,d), CH(d,h).

// ###

IHM(i,h,m2) <- virtIM(i,m1), HT(h,t), cha(m1,t,m2).
ctxtInsIHM(i,h,m) <- IHM(i,h,m), epsilonM(m).
kcfaSenIHM(i,h,m) <- IHM(i,h,m), kcfaSenM(m).

kcfaSenSpecIM(i,m) <- specIM(i,m), kcfaSenM(m).
ctxtInsSpecIM(i,m) <- specIM(i,m), epsilonM(m).

kcfaSenStatIM(i,m) <- statIM(i,m), kcfaSenM(m).
ctxtInsStatIM(i,m) <- statIM(i,m), epsilonM(m).

// ###

reachableCM(0,0).
reachableCM(0,m) <- clinitTM(t,m), reachableT(t).
reachableCM(c,m) <- CICM(_,_,c,m).
reachableCI(c,i) <- MI(m,i), reachableCM(c,m).

// ###

DIC(c,i,o) <- IinvkArg0(i,v), CVC(c,v,o).
DIH(c,i,h) <- DIC(c,i,o), CH(o,h).
DI(c,i) <- DIH(c,i,_).

kcfaDIC(0,i,d) <- CIC(0,i,d), MI(m,i), epsilonM(m).
kcfaDIC(c,i,d) <- CIC(c,i,d), MI(m,i), kcfaSenM(m).

// ###

CICM(c,i,0,m) <- reachableCI(c,i), ctxtInsIHM(i,h,m), DIH(c,i,h).
CICM(c,i,d,m) <- reachableCI(c,i), kcfaSenIHM(i,h,m), DIH(c,i,h), kcfaDIC(c,i,d).

CICM(c,i,0,m) <- reachableCI(c,i), ctxtInsSpecIM(i,m), DI(c,i).
CICM(c,i,d,m) <- reachableCI(c,i), kcfaSenSpecIM(i,m), DI(c,i), kcfaDIC(c,i,d).

CICM(c,i,0,m) <- reachableCI(c,i), ctxtInsStatIM(i,m).
CICM(c,i,d,m) <- reachableCI(c,i), kcfaSenStatIM(i,m), kcfaDIC(c,i,d).

// ### inter-procedural

DVDV(d,v,c,u) <- argCopy(i,u,m,v), CICM(c,i,d,m).
DVDV(c,u,d,v) <- retCopy(i,u,m,v), CICM(c,i,d,m).

CVC(c,u,o) <- DVDV(c,u,d,v), CVC(d,v,o), VCfilter(u,o).

// ### in context c, l = new h

RobjValAsgnInst(c,l,h) <- reachableCM(c,m), MobjValAsgnInst(m,l,h).
CVC(c,l,o) <- RobjValAsgnInst(c,l,h), CHC(c,h,o).

// ### in context c, l = r

RobjVarAsgnInst(c,l,r) <- reachableCM(c,m), MobjVarAsgnInst(m,l,r).
CVC(c,l,c1) <- RobjVarAsgnInst(c,l,r), CVC(c,r,c1), VCfilter(l,c1).

// ### in context c, l = b.f

RgetInstFldInst(c,l,b,f) <- reachableCM(c,m), MgetInstFldInst(m,l,b,f).
CVC(c,l,c2) <- RgetInstFldInst(c,l,b,f), CVC(c,b,c1), CFC(c1,f,c2). 

// ### in context c, l = STATIC.f

RgetStatFldInst(c,l,f) <- reachableCM(c,m), MgetStatFldInst(m,l,f).
CVC(c,l,o) <- RgetStatFldInst(c,l,f), FC(f,o).

// ### in context c, b.f = r

RputInstFldInst(c,b,f,r) <- reachableCM(c,m), MputInstFldInst(m,b,f,r).
CFC(c1,f,c2) <- RputInstFldInst(c,b,f,r), CVC(c,b,c1), CVC(c,r,c2). 

// ### in context c, STATIC.f = r

RputStatFldInst(c,f,r) <- reachableCM(c,m), MputStatFldInst(m,f,r).
FC(f,o) <- RputStatFldInst(c,f,r), CVC(c,r,o).

// ### reflection handling rules

reachableCM(c,m) <- reachableCI(c,i), objNewInstIM(i,m).
reachableCM(c,m) <- reachableCI(c,i), conNewInstIM(i,m).

CVC(c,v,o)  <- reachableCI(c,i), objNewInstIM(i,m), MmethArg(m,0,v), objNewInstIH(i,h), CHC(c,h,o).
CVC(c,v,o)  <- reachableCI(c,i), objNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).
CVC(c,v,o2) <- reachableCI(c,i), conNewInstIM(i,m), IinvkArg(i,1,u), MmethArg(m,1,v), CVC(c,u,o), CFC(o,0,o2).
CVC(c,v,o)  <- reachableCI(c,i), conNewInstIM(i,m), MmethArg(m,0,v), conNewInstIH(i,h), CHC(c,h,o).
CVC(c,v,o)  <- reachableCI(c,i), conNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).
CVC(c,v,o)  <- reachableCI(c,i), aryNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).

// ### rules propagating reachableT

reachableT(t) <- reachableCI(_,i), conNewInstIH(i,h), HT(h,t).
reachableT(t) <- reachableCI(_,i), objNewInstIH(i,h), HT(h,t).
reachableT(t) <- reachableCI(_,i), clsForNameIT(i,t).

reachableT(t) <- reachableCM(_,m), MobjValAsgnInst(m,_,h), HT(h,t).
reachableT(t) <- reachableCM(_,m), staticTM(t,m).
reachableT(t) <- reachableCM(_,m), MputStatFldInst(m,f,_), staticTF(t,f).
reachableT(t) <- reachableCM(_,m), MgetStatFldInst(m,_,f), staticTF(t,f).
reachableT(t) <- classT(t), reachableT(s), sub(s,t).

rootCM(0,0).
rootCM(0,m) <- reachableT(t), clinitTM(t,m).
CMCM(c,m,d,n) <- CICM(c,i,d,n), MI(m,i).
