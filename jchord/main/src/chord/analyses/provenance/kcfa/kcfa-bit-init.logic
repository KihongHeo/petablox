// Created by convert.py from ./src/chord/analyses/provenance/kcfa/kcfa-bit-init.dlog on 2015-04-20 13:08:42.267673
// # Copyright (c) 2008-2010, Intel Corporation.
// # Copyright (c) 2006-2007, The Trustees of Stanford University.
// # All rights reserved.
// # Licensed under the terms of the New BSD License.

// # Author: Xin Zhang (xin.zhang@gatech.edu)
// :name: kcfa-bit-init-dlog

// :domains: I
// :domains: M
// :domains: K
// :domains: C
// :domains: H


// ###
// # Relations
// ###

// :inputs: initCIC(C,I,C)
// :inputs: initCHC(C,H,C)
// :inputs: truncCKC(C,K,C)
// :inputs: IM(I,M)
// :inputs: MI(M,I)
// :inputs: MH(M,H)
// :inputs: CL(C,K)
// :inputs: AllowI(I,K)
// :inputs: DenyI(I,K)
// :inputs: AllowH(H,K)
// :inputs: DenyH(H,K)
// :inputs: roots(M)

// convert.py: following intermediate relation converted to output relation
// :outputs: CIC_1(C,I,C)
CIC_1(c,i,c1) -> C(c), I(i), C(c1).
// convert.py: following intermediate relation converted to output relation
// :outputs: CIC_2(C,I,C)
CIC_2(c,i,c1) -> C(c), I(i), C(c1).

// convert.py: following intermediate relation converted to output relation
// :outputs: CHC_1(C,H,C)
CHC_1(c,h,c1) -> C(c), H(h), C(c1).
// convert.py: following intermediate relation converted to output relation
// :outputs: CHC_2(C,H,C)
CHC_2(c,h,c1) -> C(c), H(h), C(c1).

// :outputs: CM(C,M)
CM(c,m) -> C(c), M(m).
// :outputs: CIC(C,I,C)
CIC(c,i,c1) -> C(c), I(i), C(c1).
// :outputs: CHC(C,H,C)
CHC(c,h,c1) -> C(c), H(h), C(c1).

// ###
// # Constraints
// ###

CM(0,m) <- roots(m).
CM(c,m) <- CIC(_,i,c), IM(i,m).

AllowI(_,0).
AllowH(_,0).
AllowH(_,1).

CIC_1(c1,i,c2) <- MI(m,i),CM(c1,m),initCIC(c1,i,c2).
CIC(c1,i,c2) <- CIC_1(c1,i,c2),CL(c2,l),AllowI(i,l).

CIC_2(c1,i,c3) <- CIC_1(c1,i,c2), CL(c2,l1), DenyI(i,l2), truncCKC(c2,l2,c3), l2 <= l1.
CIC(c1,i,c2) <- CIC_2(c1,i,c2), CL(c2,l), AllowI(i,l).

CHC_1(c1,h,c2) <- MH(m,h), CM(c1,m), initCHC(c1,h,c2).
CHC(c1,h,c2) <- CHC_1(c1,h,c2),CL(c2,l),AllowH(h,l).

CHC_2(c1,h,c3) <- CHC_1(c1,h,c2), CL(c2,l1), DenyH(h,l2), truncCKC(c2,l2,c3), l2 <= l1.
CHC(c1,h,c2) <- CHC_2(c1,h,c2), CL(c2,l), AllowH(h,l).
