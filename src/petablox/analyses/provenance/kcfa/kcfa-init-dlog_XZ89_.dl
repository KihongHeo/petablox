// name=kcfa-init-dlog_XZ89_
.number_type I
.number_type M
.number_type K
.number_type C
.number_type H


.decl initCIC(c:C,i:I,c:C) //C0,I0,C1
.input initCIC()
.decl initCHC(c:C,h:H,c:C) //C0,H0,C1
.input initCHC()
.decl truncCKC(c:C,k:K,c:C) //C0,K0,C1
.input truncCKC()
.decl IK(i:I,k:K) //I0,K0
.input IK()
.decl HK(h:H,k:K) //H0,K0
.input HK()
.decl IM(i:I,m:M) //I0,M0
.input IM()
.decl MI(m:M,i:I) //M0,I0
.input MI()
.decl MH(m:M,h:H) //M0,H0
.input MH()
.decl roots(m:M) //M0
.input roots()

.decl CM(c:C,m:M) //C0,M0
.output CM()
.decl CIC(c:C,i:I,c:C) //C0,I0,C1
.output CIC()
.decl CHC(c:C,h:H,c:C) //C0,H0,C1
.output CHC()

.decl CM_XZ89_0(m:M) //M0
.output CM_XZ89_0()
.decl CIC_XZ89_1(c1:C,i:I,c3:C,m:M,k:K,c2:C) //C0,I0,C1,M0,K0,C2
.output CIC_XZ89_1()
.decl CM_XZ89_2(c:C,m:M,v_XZ89_0:C,i:I) //C0,M0,C1,I0
.output CM_XZ89_2()
.decl CHC_XZ89_3(c1:C,h:H,c3:C,m:M,k:K,c2:C) //C0,H0,C1,M0,K0,C2
.output CHC_XZ89_3()

CM(0,m) :- roots(m).
CIC(c1,i,c3) :- MI(m,i), CM(c1,m), IK(i,k), initCIC(c1,i,c2), truncCKC(c2,k,c3).
CM(c,m) :- CIC(_,i,c), IM(i,m).
CHC(c1,h,c3) :- MH(m,h), CM(c1,m), HK(h,k), initCHC(c1,h,c2), truncCKC(c2,k,c3).

CM_XZ89_0(m) :- roots(m).
CIC_XZ89_1(c1,i,c3,m,k,c2) :- MI(m,i), CM(c1,m), IK(i,k), initCIC(c1,i,c2), truncCKC(c2,k,c3).
CM_XZ89_2(c,m,v_XZ89_0,i) :- CIC(v_XZ89_0,i,c), IM(i,m).
CHC_XZ89_3(c1,h,c3,m,k,c2) :- MH(m,h), CM(c1,m), HK(h,k), initCHC(c1,h,c2), truncCKC(c2,k,c3).
