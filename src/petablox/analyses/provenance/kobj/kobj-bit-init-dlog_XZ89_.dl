// name=kobj-bit-init-dlog_XZ89_
.number_type I
.number_type M
.number_type K
.number_type C
.number_type H
.number_type V


.decl initCOC(c:C,h:H,c:C) //C0,H0,C1
.input initCOC()
.decl initCHC(c:C,h:H,c:C) //C0,H0,C1
.input initCHC()
.decl truncCKC(c:C,k:K,c:C) //C0,K0,C1
.input truncCKC()
.decl HK(h:H,k:K) //H0,K0
.input HK()
.decl OK(h:H,k:K) //H0,K0
.input OK()
.decl roots(m:M) //M0
.input roots()
.decl IM(i:I,m:M) //I0,M0
.input IM()
.decl VH(v:V,h:H) //V0,H0
.input VH()
.decl MI(m:M,i:I) //M0,I0
.input MI()
.decl MH(m:M,h:H) //M0,H0
.input MH()
.decl CL(c:C,k:K) //C0,K0
.input CL()
.decl IinvkArg0(i:I,v:V) //I0,V1
.input IinvkArg0()
.decl statM(m:M) //M0
.input statM()
.decl AllowH(h:H,k:K) //H0,K0
.input AllowH()
.decl DenyH(h:H,k:K) //H0,K0
.input DenyH()
.decl AllowO(h:H,k:K) //H0,K0
.input AllowO()
.decl DenyO(h:H,k:K) //H0,K0
.input DenyO()
.decl thisMV(m:M,v:V) //M0,V0
.input thisMV()

.decl CHC_1(c:C,h:H,c:C) //C0,H0,C1
.output CHC_1()
.decl HM(h:H,m:M) //H0,M0
.output HM()
.decl CM(c:C,m:M) //C0,M0
.output CM()
.decl CHC_2(c:C,h:H,c:C) //C0,H0,C1
.output CHC_2()
.decl COC(c:C,h:H,c:C) //C0,H0,C1
.output COC()
.decl CHC(c:C,h:H,c:C) //C0,H0,C1
.output CHC()
.decl COC_2(c1:C,h:H,c3:C) //C0,H0,C1
.output COC_2()
.decl COC_1(c1:C,h:H,c2:C) //C0,H0,C1
.output COC_1()

.decl CM_XZ89_8_11(c:C,m:M,v_XZ89_0:C,h:H) //C0,M0,C1,H0
.output CM_XZ89_8_11()
.decl CM_XZ89_9_11(c:C,m1:M,m0:M,i:I) //C0,M0,M1,I0
.output CM_XZ89_9_11()
.decl COC_2_XZ89_6_11(c1:C,h:H,c3:C,c2:C,l1:K,l2:K) //C0,H0,C1,C2,K0,K1
.output COC_2_XZ89_6_11()
.decl COC_XZ89_7_11(c1:C,h:H,c2:C,l:K) //C0,H0,C1,K0
.output COC_XZ89_7_11()
.decl CM_XZ89_12_11(m:M) //M0
.output CM_XZ89_12_11()
.decl CHC_1_XZ89_10_11(c1:C,h:H,c2:C,m:M) //C0,H0,C1,M0
.output CHC_1_XZ89_10_11()
.decl COC_1_XZ89_11_11(c1:C,h:H,c2:C,m:M) //C0,H0,C1,M0
.output COC_1_XZ89_11_11()
.decl CHC_2_XZ89_2_11(c1:C,h:H,c3:C,c2:C,l1:K,l2:K) //C0,H0,C1,C2,K0,K1
.output CHC_2_XZ89_2_11()
.decl CHC_XZ89_1_11(c1:C,h:H,c2:C,l:K) //C0,H0,C1,K0
.output CHC_XZ89_1_11()
.decl COC_XZ89_5_11(c1:C,h:H,c2:C,l:K) //C0,H0,C1,K0
.output COC_XZ89_5_11()
.decl CHC_XZ89_3_11(c1:C,h:H,c2:C,l:K) //C0,H0,C1,K0
.output CHC_XZ89_3_11()

HM(h,m) :- thisMV(m,v), VH(v,h).
CM(0,m) :- roots(m).
CM(c,m) :- COC(_,h,c), HM(h,m).
CM(c,m1) :- CM(c,m0), IM(i,m1), statM(m1), MI(m0,i).
AllowH(_,0).
CHC_1(c1,h,c2) :- MH(m,h), CM(c1,m), initCHC(c1,h,c2).
CHC(c1,h,c2) :- CHC_1(c1,h,c2), CL(c2,l), AllowH(h,l).
CHC_2(c1,h,c3) :- CHC_1(c1,h,c2), CL(c2,l1), DenyH(h,l2), truncCKC(c2,l2,c3), l2<=l1.
CHC(c1,h,c2) :- CHC_2(c1,h,c2), CL(c2,l), AllowH(h,l).
AllowO(_,0).
COC_1(c1,h,c2) :- MH(m,h), CM(c1,m), initCOC(c1,h,c2).
COC(c1,h,c2) :- COC_1(c1,h,c2), CL(c2,l), AllowO(h,l).
COC_2(c1,h,c3) :- COC_1(c1,h,c2), CL(c2,l1), DenyO(h,l2), truncCKC(c2,l2,c3), l2<=l1.
COC(c1,h,c2) :- COC_2(c1,h,c2), CL(c2,l), AllowO(h,l).

CHC_XZ89_1_11(c1,h,c2,l) :- CHC_1(c1,h,c2), CL(c2,l), AllowH(h,l).
CHC_2_XZ89_2_11(c1,h,c3,c2,l1,l2) :- CHC_1(c1,h,c2), CL(c2,l1), DenyH(h,l2), truncCKC(c2,l2,c3), l2<=l1.
CHC_XZ89_3_11(c1,h,c2,l) :- CHC_2(c1,h,c2), CL(c2,l), AllowH(h,l).
COC_XZ89_5_11(c1,h,c2,l) :- COC_1(c1,h,c2), CL(c2,l), AllowO(h,l).
COC_2_XZ89_6_11(c1,h,c3,c2,l1,l2) :- COC_1(c1,h,c2), CL(c2,l1), DenyO(h,l2), truncCKC(c2,l2,c3), l2<=l1.
COC_XZ89_7_11(c1,h,c2,l) :- COC_2(c1,h,c2), CL(c2,l), AllowO(h,l).
CM_XZ89_8_11(c,m,v_XZ89_0,h) :- COC(v_XZ89_0,h,c), HM(h,m).
CM_XZ89_9_11(c,m1,m0,i) :- CM(c,m0), IM(i,m1), statM(m1), MI(m0,i).
CHC_1_XZ89_10_11(c1,h,c2,m) :- MH(m,h), CM(c1,m), initCHC(c1,h,c2).
COC_1_XZ89_11_11(c1,h,c2,m) :- MH(m,h), CM(c1,m), initCOC(c1,h,c2).
CM_XZ89_12_11(m) :- roots(m).
