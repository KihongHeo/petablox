

.number_type I
.number_type M
.number_type K
.number_type C
.number_type H
.number_type V



.decl initCOC(c:C, h:H, c:C)
.input initCOC()
.decl initCHC(c:C, h:H, c:C)
.input initCHC()
truncCKC(c:C, k:K, c:C) input 	# K is the domain of integers
HK(h:H, k:K) input				#the parametric relation
OK(h:H, k:K) input				#the parametric relation
.decl roots(m:M)
.input roots()
.decl IM(i:I, m:M)
.input IM()
.decl VH(v:V, h:H)
.input VH()
.decl MI(m:M, i:I)
.input MI()
.decl MH(m:M, h:H)
.input MH()
.decl CL(c:C, k:K)
.input CL()
.decl IinvkArg0(i:I,v:V)
.input IinvkArg0()
.decl statM(m:M)
.input statM()

.decl AllowH(h:H, k:K)
.input AllowH()
.decl DenyH(h:H, k:K)
.input DenyH()
.decl AllowO(h:H, k:K)
.input AllowO()
.decl DenyO(h:H, k:K)
.input DenyO()

.decl thisMV(m:M, v:V)
.input thisMV()
.decl HM(h:H, m:M)

.decl CHC_1(c:C, h:H, c:C)
.decl CHC_2(c:C, h:H, c:C)
.decl COC_1(c:C, h:H, c:C)
.decl COC_2(c:C, h:H, c:C)

.decl CM(c:C, m:M)
.output CM()
.decl CHC(c:C, h:H, c:C)
.output CHC()
.decl COC(c:C, h:H, c:C)
.output COC()


HM(h,m) :- thisMV(m,v), VH(v,h).

CM(0,m) :- roots(m).
CM(c,m) :- COC(_,h,c), HM(h,m).
CM(c,m1) :- CM(c,m0), IM(i,m1), statM(m1), MI(m0,i).

AllowH(_,0).

CHC_1(c1,h,c2) :- MH(m,h), CM(c1,m),initCHC(c1,h,c2).
CHC(c1,h,c2) :- CHC_1(c1,h,c2),CL(c2,l),AllowH(h,l).

CHC_2(c1,h,c3) :- CHC_1(c1,h,c2), CL(c2,l1), DenyH(h,l2), truncCKC(c2,l2,c3), l2 <= l1.
CHC(c1,h,c2) :- CHC_2(c1,h,c2), CL(c2,l), AllowH(h,l).


AllowO(_,0).

COC_1(c1,h,c2) :- MH(m,h), CM(c1,m),initCOC(c1,h,c2).
COC(c1,h,c2) :- COC_1(c1,h,c2),CL(c2,l),AllowO(h,l).

COC_2(c1,h,c3) :- COC_1(c1,h,c2), CL(c2,l1), DenyO(h,l2), truncCKC(c2,l2,c3), l2 <= l1.
COC(c1,h,c2) :- COC_2(c1,h,c2), CL(c2,l), AllowO(h,l).
