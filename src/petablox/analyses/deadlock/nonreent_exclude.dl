
// name=deadlock-nonreent-exclude-dlog

.number_type M
.number_type V
.number_type A
.number_type L
.number_type I



.decl ML(m:M,l:L) //M0,L0
.input ML()
.decl MI(m:M,i:I) //M0,I0
.input MI()
.decl threadStartI(i:I) //I0
.input threadStartI()
.decl threadAM(a:A,m:M) //A0,M0
.input threadAM()
.decl IM(i:I,n:M) //I0,M0
.input IM()
.decl transLI(l:L,i:I) //L0,I0
.input transLI()
.decl transLL(l1:L,l2:L) //L0,L1
.input transLL()

.decl syncMN(m:M,n:L) //M0,L0
.decl syncIN(i:I,n:L) //I0,L0

.decl syncMLL(m:M,l1:L,l2:L) //M0,L0,L1
.decl syncILL(i:I,l1:L,l2:L) //I0,L0,L1
.decl syncTLL(t:A,l1:L,l2:L) //A0,L0,L1
.output syncTLL()


syncML(m,l) :- ML(m,l).
syncIL(i,l) :- IM(i,m), syncML(m,l), !threadStartI(i).
syncML(m,l) :- MI(m,i), syncIL(i,l).

syncMLL(m,l1,l2) :- transLL(l1,l2), ML(m,l1), ML(m,l2).
syncMLL(m,l1,l2) :- transLI(l1,i), MI(m,i), syncIL(i,l2).
syncMLL(m,l1,l2) :- MI(m,i), syncILL(i,l1,l2).

syncILL(i,l1,l2) :- IM(i,m), syncMLL(m,l1,l2), !threadStartI(i).

syncTLL(t,l1,l2) :- threadAM(t,m), syncMLL(m,l1,l2).

