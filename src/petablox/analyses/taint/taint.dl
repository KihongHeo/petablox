// name=taint-dlog

.symbol_type Name

.number_type M
.decl MMap(m:M, n:Name) //M,Name
.input MMap()

.number_type MethodID
.decl MethodIDMap(m:MethodID, n:Name) //methodID,Name
.input MethodIDMap()

.number_type EXPR
.decl EXPRMap(e:EXPR, n:Name) //EXPR,Name
.input EXPRMap()

.number_type Invoke
.decl InvokeMap(i:Invoke, n:Name) //Invoke,Name
.input InvokeMap()

.number_type P
.decl PMap(p:P, n:Name) //P,Name
.input PMap()

.number_type Z
.decl ZMap(z:Z, n:Name) //Z,Name
.input ZMap()

.number_type Var 
.decl VarMap(v:Var, n:Name) //Var,Name
.input VarMap()

.decl reachableM(m:M) // M
.input reachableM()

.decl MP(m:M,p:P) // M0,P0
.input MP()
.decl AssignInst(p:P,e0:EXPR,e1:EXPR)  // P0,EXPR0,EXPR1
.input AssignInst()
.decl InvokeInst(p:P,i:Invoke)  // P0,Invoke0
.input InvokeInst()
.decl InterfaceInvoke(i:Invoke,e:EXPR,f:MethodID) // Invoke0,EXPR0,MethodID0
.input InterfaceInvoke()
.decl VirtualInvoke(i:Invoke,e:EXPR,f:MethodID) // Invoke0,EXPR0,MethodID0
.input VirtualInvoke()
.decl StaticInvoke(i:Invoke,f:MethodID) // Invoke0,MethodID0
.input StaticInvoke()
.decl VarExpr(e:EXPR,v:Var) // EXPR0,Var0
.input VarExpr()
.decl InvokeExpr(e:EXPR,i:Invoke) // EXPR0,Invoke0
.input InvokeExpr()
.decl SpecialInvoke(i:Invoke,e:EXPR,f:MethodID) // Invoke0,EXPR0,MethodID0
.input SpecialInvoke()
.decl MethodArg(i:Invoke,z:Z,e:EXPR)   // Invoke0,Z0,EXPR0
.input MethodArg()
.decl AddExpr(e0:EXPR,e1:EXPR,e2:EXPR) // EXPR0,EXPR1,EXPR2
.input AddExpr()

.decl source(f:MethodID)  // MethodID
.output source()
.decl sink(f:MethodID)  // MethodID
.output sink()
.decl taint_exp(e:EXPR,p:P) // EXPR0,P0
.output taint_exp()
.decl taint_var(v:Var,p:P)  // Var0,P0
.output taint_var()

.decl sql_injection(p0:P,p1:P,e:EXPR) // P0,P1,EXPR0
.output sql_injection()

.decl sql_injectionMap(p0:Name, p1:Name, e:Name) // P0,P1,EXPR0
.output sql_injectionMap()

source(x) :- MethodIDMap(x, "<test.C: int source()>").
sink(x) :- MethodIDMap(x, "<test.C: void sink(int)>").
taint_var(v,p) :- AssignInst(p,e,e0), VarExpr(e,v), InvokeExpr(e0,i), VirtualInvoke(i,_,f), source(f).
taint_var(v,p) :- AssignInst(_,e,e0), VarExpr(e,v), taint_exp(e0,p).                  
taint_exp(e,p) :- taint_var(v,p), VarExpr(e,v).
taint_exp(e,p) :- AddExpr(e,e0,_), taint_exp(e0,p).

sql_injection(p0,p1,e) :- taint_exp(e,p0), InvokeInst(p1,i), VirtualInvoke(i,_,f), sink(f), MethodArg(i,0,e).

sql_injectionMap(p0s,p1s,es) :- sql_injection(p0,p1,e), PMap(p0, p0s), PMap(p1, p1s), EXPRMap(e, es).
