
// name=datarace-dlog

.number_type A
.number_type F
.number_type E
.number_type H
.number_type M
.number_type L
.number_type K



.decl writeE(e:E) //E0
.input writeE()
.decl ME(m:M,e:E) //M0,E0
.input ME()
.decl EF(e:E,f:F) //E0,F0
.input EF()
.decl statF(f:F) //F0
.input statF()
.decl reachableAM(a:A,m:M) //A0,M0
.input reachableAM()
.decl checkExcludedM(m:M) //M0
.input checkExcludedM()
.decl excludeInitMethods(k:K) //K0
.input excludeInitMethods()
.decl initM(m:M) //M0
.input initM()

.decl statE(e:E) //E0
.decl rdOrWrAEF(a:A,e:E,f:F) //A0,E0,F0
.decl onlyWrAEF(a:A,e:E,f:F) //A0,E0,F0
.decl relevantAM(a:A,m:M) //A0,M0
.decl relevantAE(a:A,e:E) //A0,E0
.decl excludeInitM(m:M) //M0


.decl startingRace(a1:A,e1:E,a2:A,e2:E) //A0,E0,A1,E1


.decl EH(e:E,h:H) //E0,H0
.input EH()
.decl escapingRace(a1:A,e1:E,a2:A,e2:E) //A0,E0,A1,E1
.output escapingRace()


.decl mhe(e:E,a1:A,a2:A) //E0,A0,A1
.input mhe()
.decl parallelRace(a1:A,e1:E,a2:A,e2:E) //A0,E0,A1,E1
.output parallelRace()


.decl syncLH(l:L,h:H) //L,H
.input syncLH()
.decl unlockedE(t:A,e:E,o:H) //A0,E0,H0
.input unlockedE()
.decl excludeSameThread(k:K) //K0
.input excludeSameThread()
.decl guardedE(t:A,e:E,o:H) //A0,E0,H0
.decl unlikelyRace(a1:A,e1:E,a2:A,e2:E) //A0,E0,A1,E1
.output unlikelyRace()

.decl ultimateRace(a1:A,e1:E,a2:A,e2:E) //A0,E0,A1,E1
.output ultimateRace()
.decl raceEEH(e1:E,e2:E,h:H) //E0,E1,H0
.output raceEEH()
.decl racePairs(e1:E,e2:E) //E0,E1
.output racePairs()


excludeInitM(m) :- excludeInitMethods(1), initM(m).

relevantAM(a,m) :- reachableAM(a,m), !checkExcludedM(m), !excludeInitM(m).

relevantAE(a,e) :- relevantAM(a,m), ME(m,e).

rdOrWrAEF(a,e,f) :- relevantAE(a,e), EF(e,f).
onlyWrAEF(a,e,f) :- relevantAE(a,e), EF(e,f), writeE(e).

startingRace(a1,e1,a2,e2) :- onlyWrAEF(a1,e1,f), rdOrWrAEF(a2,e2,f), e1 < e2.
startingRace(a1,e1,a2,e2) :- rdOrWrAEF(a1,e1,f), onlyWrAEF(a2,e2,f), e1 < e2.
startingRace(a1,e1,a2,e2) :- onlyWrAEF(a1,e1,f), onlyWrAEF(a2,e2,f), e1 = e2, a1 <= a2.


statE(e) :- EF(e,f), statF(f).

escapingRace(a1,e1,a2,e2) :- startingRace(a1,e1,a2,e2), EH(e1,h), EH(e2,h).
escapingRace(a1,e1,a2,e2) :- startingRace(a1,e1,a2,e2), statE(e1), statE(e2).


parallelRace(a1,e1,a2,e2) :- escapingRace(a1,e1,a2,e2), mhe(e1,a1,a2), mhe(e2,a2,a1).


syncH(h) :- syncLH(_,h).
guardedE(t,e,h) :- relevantAE(t,e), syncH(h), !unlockedE(t,e,h).

unlikelyRace(a1,e1,a2,e2) :- parallelRace(a1,e1,a2,e2), guardedE(a1,e1,h), guardedE(a2,e2,h).
unlikelyRace(a1,e1,a2,e2) :- parallelRace(a1,e1,a2,e2), excludeSameThread(1), a1=a2.

ultimateRace(a1,e1,a2,e2) :- parallelRace(a1,e1,a2,e2), !unlikelyRace(a1,e1,a2,e2).

raceEEH(e1,e2,h) :- ultimateRace(_,e1,_,e2), EH(e1,h), EH(e2,h).
racePairs(e1,e2) :- ultimateRace(_,e1,_,e2).

