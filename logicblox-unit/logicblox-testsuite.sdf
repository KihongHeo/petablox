%%%
 %% Syntax definition of logicblox-unit testsuites
 %%
 %% @author Martin Bravenboer <martin.bravenboer@acm.org>
 %%%
definition
module Main
hiddens
  context-free start-symbols TestSuite

exports
  %%%
   %% Testsuite
   %%%
  context-free syntax
    "testsuite" Name Test+ -> TestSuite {cons("logicblox-testsuite")}

  syntax
    "test" Space
      <Description-CF> <LAYOUT?-CF>
      <Input-CF> <LAYOUT?-CF>
      <Result-CF>
      -> <Test-CF> {cons("logicblox-test")}

    "test" [\ \t\n\r]+
      <Input-CF> <LAYOUT?-CF>
      <Result-CF>
      -> <Test-CF>  {cons("logicblox-test-no-description")}

    "test" Space
      <Description-CF> <LAYOUT?-CF>
      <AssertionInput-CF> <LAYOUT?-CF>
      <Assertions-CF>
      -> <Test-CF> {cons("logicblox-assertions")}

    "test" [\ \t\n\r]+
      <AssertionInput-CF> <LAYOUT?-CF>
      <Assertions-CF>
      -> <Test-CF>  {cons("logicblox-assertions-no-description")}

    [\ ]+ -> Space

  %%%
   %% Input
   %%%
  context-free syntax
    "using database" facts:PathName "->" query:Query -> Input {cons("query-database")}
    "using database" facts:PathName                  -> AssertionInput {cons("database")}

  %%%
   %% Result
   %%% 
  context-free syntax
    %% TODO: need to redesign, this is getting messy.
    "assert" {Assertion ","?}+ -> Assertions {cons("assertions")}
    Literal                    -> Assertion  {cons("assert-literal")}

    "->" "empty"                   -> Result {cons("result-empty-relation")}
    "->" {tuple:GroundTuple ","?}+ -> Result {cons("result-relation")}
    "->" {term:GroundTerm   ","?}+ -> Result {cons("result-single-row-relation")}

    "->" "project" {Variable ","}+ Result -> Result {cons("result-project")}

    "(" {term:GroundTerm ","}* ")" -> GroundTuple {cons("tuple")}

    StringLiteral  -> GroundTerm {cons("string")}
    IntegerLiteral -> GroundTerm {cons("integer")}

    {Literal ","}+ -> Query {cons("query")}
    Atom           -> Literal {cons("positive")}
    "not" Atom     -> Literal {cons("negative")}

    Predicate "[" {Term ","}* "]" "=" Term  -> Atom {cons("atom-function")}
    Predicate "(" {Term ","}* ")"           -> Atom {cons("atom")}
    "?" Variable -> Term
    GroundTerm   -> Term
    "_"          -> Term {cons("wildcard")}

    VariableLex -> Variable {cons("variable")}

  lexical syntax
    "\"" ~[\"]* "\""       -> StringLiteral
    [0-9]+                 -> IntegerLiteral
    [A-Za-z][\:A-Za-z0-9]* -> Predicate
    [A-Za-z][A-Za-z0-9]*   -> VariableLex

  sorts Name Description
  context-free syntax
    EOLString -> Name {cons("name")}
    EOLString -> Description {cons("description")}

  lexical syntax
    ~[\n]+ -> EOLString
    [A-Za-z0-9\-\+\_\.\\\/]+ -> PathName

  lexical restrictions
    EOLString -/- ~[\n]

  sorts ShortCom LongCom CommChar Asterisk Eof
  lexical syntax
    [\r\n\t\ ]               -> LAYOUT
    "//" ~[\n]* ([\n] | Eof) -> LAYOUT
    "/*" CommChar* "*/"      -> LAYOUT

    ~[\*]      -> CommChar
    "*"        -> Asterisk
    Asterisk   -> CommChar

  lexical restrictions
    Asterisk -/- [\/]

  restrictions
    Space    -/- [\ ]

  context-free restrictions
    LAYOUT? -/- [\r\n\t\ ]
